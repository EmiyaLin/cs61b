Test result for randomly insert strings.

This program inserts random Strings of length L into different types of maps as <String, Integer> pairs.
Please enter desired length of each string: 100

Enter # strings to insert into the maps: 5000
class bstmap.ULLMap: 0.16 sec
class bstmap.BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.01 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 10000
class bstmap.ULLMap: 0.52 sec
class bstmap.BSTMap: 0.02 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.01 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 20000
class bstmap.ULLMap: 2.27 sec
class bstmap.BSTMap: 0.03 sec
Java's Built-in TreeMap: 0.03 sec
Java's Built-in HashMap: 0.02 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 50000
--Stack Overflow -- couldn't add 50000 strings of length 100.
class bstmap.BSTMap: 0.10 sec
Java's Built-in TreeMap: 0.07 sec
Java's Built-in HashMap: 0.06 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 100000
--Stack Overflow -- couldn't add 100000 strings of length 100.
class bstmap.BSTMap: 0.21 sec
Java's Built-in TreeMap: 0.18 sec
Java's Built-in HashMap: 0.12 sec

Test result for in order insertion (depth for bst is too large can cause stack overflow)

This program inserts lexicographically increasing Strings into Maps as <String, Integer> pairs.

Enter # strings to insert into the maps: 10000
class bstmap.ULLMap: 0.88 sec
class bstmap.BSTMap: 1.73 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.01 sec
Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 50000
--Stack Overflow -- couldn't add 50000 strings.
--Stack Overflow -- couldn't add 50000 strings.
Java's Built-in TreeMap: 0.05 sec
Java's Built-in HashMap: 0.04 sec
Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 20000
class bstmap.ULLMap: 3.81 sec
--Stack Overflow -- couldn't add 20000 strings.
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.01 sec
